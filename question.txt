

>>>Lesson7_7
〇出力
一番目の整数を入力してください。
10←
二番目の整数を入力してください。
5←
合計は15です。
〇注意
sum関数とmain関数を用意
sum関数で戻り値を用いる。

>>>Lesson7_9
〇出力
一番目の整数を入力してください。
10←
二番目の整数をお入力してください。
5←
最大値は10です。
〇注意
インライン関数を使う。

>>>Lesson7_12
〇出力
二つの整数を入力してください。
5
10
2つの小数を入力してください。
3.14
45.182
整数値の最大は10です。
小数値の最大は45.182です。
〇注意
関数プロトタイプ宣言をする。
関数maxをオーバーロードする。

>>>Lesson7_13
〇出力
二つの整数を入力してください。
5
10
2つの小数を入力してください。
3.14
45.182
整数値の最大は10です。
小数値の最大は45.182です。
〇注意
関数テンプレートを用いる。

>>>Lesson8_4
〇出力
変数aの値は5です。
ポインタpAの値は0x00F4です。
*pAの値は5です。
変数bの値は10です。
ポインタpAの値は0x00F0に変更されました。
*pAの値は10です。
〇注意
ポインタを宣言し、アドレスを格納する。
変数aの値は変わらない。

>>>Lesson8_5
〇出力
変数aの値は5です。
*pAに50を代入しました。
変数aの値は50です。
〇出力
ポインタを宣言し、アドレスを格納する。
変数aの値も変わる。

>>>Lesson8_7
〇出力
変数num1の値は5です。
変数num2の値は10です。
変数num1と変数num2の値を交換します。
変数num1の値は10です。
変数num2の値は5です。
〇注意
値を交換するswap関数をプロトタイプ宣言する。
値の変換はポインタを利用する。

>>>Lesson8_9
〇出力
変数num1の値は5です。
変数num2の値は10です。
変数num1と変数num2の値を交換します。
変数num1の値は10です。
変数num2の値は5です。
〇注意
値を変換するswap関数をプロトタイプ宣言する。
値の交換は参照を利用する。

>>>Lesson9_3
〇出力
5人の点数を入力してください。
22
80
47
76
43
1番目の人の点数は80です。
2番目の人の点数は76です。
3番目の人の点数は47です。
4番目の人の点数は43です。
5番目の人の点数は22です。
〇注意
配列を使って5人の点数を格納し、main関数の中でソートする。

>>>Lesson9_7
〇出力
5人のテストの点数を入力してください。
36
74
63
46
53
5人の平均点は47.74です。
〇注意
配列を使って点数を格納し、avg関数で平均点をだす。
avg関数の引数は配列にする。

>>Lesson9_
〇出力
5人のテストの点数を入力してください。
36
74
63
46
53
5人の平均点は47.74です。
〇注意
配列を使って点数を格納し、avg関数で平均点をだす。
avg関数の仮引数はポインタで表記する。

>>>Lesson9_8
〇出力
Hello
〇注意
文字列配列で出力する。

>>>Lesson9_9
〇出力
Hello
〇注意
文字列をポインタで扱う。

>>>Lesson9_10
〇出力
Hello
〇注意
配列に文字列を格納し、一文字ずつ出力する。

>>>Lesson10_2
〇出力
aの値は0 bの値は0
aの値は1 bの値は1
aの値は2 bの値は2
aの値は3 bの値は3
aの値は4 bの値は4
〇注意
main関数とは別のadd関数で足し合わせる操作をする。
変数aとbはmain関数内で定義しない。それぞれ別スコープ範囲で定義する。

>>>Lesson10_3
〇出力
動的にメモリを確保しました。
動的に確保したメモリを使って10を出力しています。
確保したメモリを解放しました。
〇注意
main関数の中でメモリの確保と解放を行う。

>>>Lesson10_4
〇出力
何人のテストの点数を入力しますか。
5
人数分のテストの点数を入力してください。
35
36
25
36
36
1番目の人のテストの点数は80です。
2番目の人のテストの点数は36です。
3番目の人の・・・
・・・
5番目の人のテストの点数は36です。
〇注意
main関数内で入力された人数分の配列を動的に確保し、解放する。

>>>Lesson11_1
〇出力
日曜日です。
〇注意
列挙型でSUN,MON,TUE,WED,THU,FRI,SATを宣言し、変数wをその型で利用する。
wにSUNを代入して、場合分けを用いて出力する。

>>>Lesson11_3
〇出力
car1の車のナンバーは1234ガソリン量は25.5です。
car2の車のナンバーは4567ガソリン量は52.2です。
car1をcar2に代入しました。
car2の車のナンバーは1234ガソリン量は25.5になりました。
〇注意
構造体型Carを宣言する。
出力の通りに構造体型変数car1,car2を初期化する。
構造体型同士で代入し、出力する。

>>>Lesson11_4
〇出力
ナンバーを入力してください。
1234
ガソリン量を入力してください。
25.5
車のナンバーは1234ガソリン量は25.5です。
〇注意
ナンバーとガソリン量を格納する構造体型Carを宣言する。
入力した値をshow関数に渡し、出力する。

>>>Lesson11_5
〇出力
ナンバーを入力してください。
1234
ガソリン量を入力してください。
25.5
車のナンバーは1234ガソリン量は25.5です。
〇注意
ナンバーとガソリン量を格納する構造体型Carを宣言する。
入力した値をshow関数に渡し、出力する。引数は構造体へのポインタを用いる。
show関数の中ではポインタからメンバへアクセスする。

>>>Lesson11_6
〇出力
ナンバーを入力してください。
1234
ガソリン量を入力してください。
25.5
車のナンバーは1234ガソリン量は25.5です。
〇注意
ナンバーとガソリン量を格納する構造体型Carを宣言する。
入力した値をshow関数に渡し、出力する。show関数への引数は構造体への参照を用いる。
参照を用いてメンバへアクセスする。

>>>Lesson11_7
〇出力
num1の値を入力してください。
1234
num1の値は1234です。
num2の値は1234です。
num2の値を入力してください。
4321
num1の値は4321です。
num2の値は4321です。
〇注意
int型の変数を2つ格納する共用体型を宣言する。
共用体型では同時に2つ以上の変数の値を記憶できないことを確認する。

>>>Lesson12_2
〇出力
ナンバーを1234にガソリン量を20.5にしました。(setNumGas)
車のナンバーは1234です。(show)
ガソリン量は20.5です。(show)
正しくないガソリン量(-10.0)を指定してみます。(main)
-10は正しいガソリン量ではありません。(setNumGas)
ガソリン量を変更できませんでした。(setNumGas)
車のナンバーは1234です。(show)
ガソリン量は20.5です。(show)
〇注意
Carクラスを宣言する。privateでint型numとdouble型gasを定義、publicでshow関数とsetNumGas関数を定義する。
setNumGas関数内では渡された引数numとgasに対し、gasが0<gas<1000を満たさないとセットできないようにする。

>>>Lesson12_3
〇出力
ナンバーを1234にガソリン量を20.5にします。(main)
ナンバーが1234、ガソリン量が20.5に設定されました。(setNumGas)
車のナンバーは1234です。(show)
車のガソリン量は20.5です。(show)
ナンバーが1234、ガソリン量が20.5の車を購入しました。(buy)
〇注意
Carクラスを宣言する。privateでint型numとdouble型gasを定義、publicでshow関数とsetNumGas関数とインラインで
numとgasの値を得る関数を定義する。
setNumGasは12_2と同じ。
buy関数はclassとmain関数の外で定義し、引数としてオブジェクトを用いる。

>>>Lesson13_2
〇出力
車を作成しました。(引数なしコンストラクタ)
ナンバー1234ガソリン量20,5の車を作成しました。(引数ありコンストラクタ)
車のナンバーは0でガス量は0.0です。(show)
車のナンバーは1234でガス量は20.5です。(show)
〇注意
クラスCarで、privateでint型numとdouble型gasを宣言、publicでshow関数とコンストラクタを宣言。
引数なしと引数ありのコンストラクタを定義する。

>>>Lesson13_3
〇出力
車を作成しました。(mycars[0]:引数なしコンストラクタ)
ナンバー1234ガソリン量25.5の車を作成しました。(mycars[1]:引数ありコンストラクタ1)
ナンバー4567ガソリン量52.2の車を作成しました。(mycars[2]:引数ありコンストラクタ2)
車のナンバーは0でガソリン量は0.0です。(show)
車のナンバーは1234でガソリン量は25.5です。(show)
車のナンバーは4567でガソリン量は52.2です。(show)
〇注意
クラスを宣言。privateでint型numとdouble型gasを定義。publicでshow関数。
配列mycarsでオブジェクトをまとめて宣言する。
show関数で各オブジェクトの値を参照する。

>>>Lesson13_6
〇出力
車は全部で0台あります。(showSum)
車を作成しました。(オブジェクトの作成)
ナンバーを1234にガソリン量を20.5にしました。(setCar)
車は全部で1台あります。(showSum)
車を作成しました。(オブジェクト2の作成)
ナンバーを4567にガソリン量を52.2にしました。(setCar)
車は全部で2台あります。(showSum)
〇注意
オブジェクトcar1とcar2をつくる。
静的メンバを用いて、作ったオブジェクトの合計数を表示する。

>>>Lesson14_1
〇出力
車を作成しました。(Carコンストラクタ)
レーシングカーを作成しました。(RacingCarコンストラクタ)
ナンバー1234にガソリン量を20.5にしました。(setCar)
コース番号を5にしました。(setCource)
〇注意
クラスCar内でprivateのint型numとdouble型gas、publicのsetCar関数を宣言。
コンストラクタはCarクラスもRacingCarクラスもそれぞれ一つ。
Carクラスからの派生クラスRacingCarでprivateのint型cource、publicで実引数をcourceにもつsetCource関数を宣言。
派生クラスのオブジェクトを作成し、setCarとsetCourceにアクセスする。

>>>Lesson14_2
〇出力
ナンバー1234ガソリン量20.5の車を作成しました。(引数ありのCarコンストラクタ)
コース番号5のレーシングカーを作成しました。(RacingCar引数3つのコンストラクタ)
〇注意
クラスCar内でprivateのint型numとdouble型gas、publicのsetCar関数を宣言。
Carクラスからの派生クラスRacingCarでprivateのint型cource、publicで実引数をcourceにもつsetCource関数を宣言。
Carクラスで引数なしと引数あり(2つ)のコンストラクタを用意する。
派生クラスのコンストラクタのうち引数を3つ(ナンバー,ガソリン量,コース)もつ方は、基本クラスから引数をもつコンストラクタを呼び出されるようにする。
もう片方のコンストラクタは引数をもたないコンストラクタを用意する。基本クラスのコンストラクタの指定はしない。



